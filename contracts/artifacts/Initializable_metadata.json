{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.  TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.  CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
			"kind": "dev",
			"methods": {},
			"stateVariables": {
				"_initialized": {
					"details": "Indicates that the contract has been initialized."
				},
				"_initializing": {
					"details": "Indicates that the contract is in the process of being initialized."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PaletteToken_flat.sol": "Initializable"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/PaletteToken_flat.sol": {
			"keccak256": "0x20002788e79544617ffe5904fe16b3dfe74defd54ff4db66ede27b8ed658a904",
			"license": "MIT",
			"urls": [
				"bzz-raw://0199c24cdaa1c8f45cdbe76f04a2804bfaa6b875bfea9f598762089ece9e0449",
				"dweb:/ipfs/QmZ9g8RxsMP8PsNo1Gj59C9ADWzNU7SuXv8sZKCG5jadnj"
			]
		}
	},
	"version": 1
}